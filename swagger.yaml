openapi: 3.0.0
info:
  title: Project Manager Backend API
  version: 1.0.0
  description: API for managing projects, including authentication.
servers:
  - url: http://localhost:5000
    description: Local development server
tags:
  - name: Authentication
    description: Endpoints related to user authentication
  - name: Workspaces
    description: Endpooints related for workspaces operations
  - name: Projects
    description: Endpoints related fro projects operations
  - name: Questions
    description: Endpoints related to questions/replies operations
  - name: Notes
    description: Endpoints related to notes operations
  - name: Tasks
    description: Endpoints related to managing tasks within projects.
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newuser"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "64dfaf7b6f7a6b1f6b7f7a6b"
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid create user payload"
                  validations:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: "email"
                        error:
                          type: string
                          example: "Invalid email format"
        '500':
          description: Failed to create user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "failed to create user"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login and generate a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
              required:
                - email
                - password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Invalid login payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid login payload"
                  validations:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: "password"
                        error:
                          type: string
                          example: "Password must be at least 8 characters"
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid email or password"
  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get the current authenticated user's information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "64dfaf7b6f7a6b1f6b7f7a6b"
                  username:
                    type: string
                    example: "newuser"
                  email:
                    type: string
                    format: email
                    example: "user@example.com"
        '401':
          description: Invalid authorization or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid authorization"
  /workspaces:
    get:
      tags:
        - Workspaces
      summary: Get all workspaces where the user is a member
      operationId: getAllJoinedWorkspaces
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of workspaces the user has joined.
          content:
            application/json:
              example:
                - id: "60f6a08b22b22b003cd9ed8e"
                  name: "Workspace 1"
                  description: "A description of workspace 1"
                  owner:
                    id: "60f6a08b22b22b003cd9ed8f"
                    username: "owner_username"
                    email: "owner@example.com"
                  isOwner: true
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        500:
          description: Internal Server Error - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Internal Server Error"
    post:
      tags:
        - Workspaces
      summary: Create a new workspace
      operationId: createWorkspace
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                description:
                  type: string
              required:
                - name
                - description
            example:
              name: "My Workspace"
              description: "This is a workspace for project management."
      responses:
        201:
          description: Workspace created successfully.
          content:
            application/json:
              example:
                workspaceId: "60f6a08b22b22b003cd9ed8e"
        400:
          description: Invalid workspace payload - The request body contains invalid or missing data.
          content:
            application/json:
              example:
                error: "Invalid workspace payload"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        500:
          description: Failed to create a workspace - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to create a workspace"
  /workspaces/{workspaceId}:
    get:
      tags:
        - Workspaces
      summary: Get a workspace by ID
      operationId: getWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Details of the requested workspace.
          content:
            application/json:
              example:
                id: "60f6a08b22b22b003cd9ed8e"
                name: "Workspace 1"
                description: "A description of workspace 1"
                isOwner: true
                owner:
                  id: "60f6a08b22b22b003cd9ed8f"
                  username: "owner_username"
                  email: "owner@example.com"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to access this workspace.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Workspace Not Found"
        500:
          description: Internal Server Error - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Internal Server Error"
    put:
      tags:
        - Workspaces
      summary: Update a workspace by ID
      operationId: updateWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  description: "Optional name of the workspace."
                description:
                  type: string
                  description: "Optional description of the workspace."
            example:
              name: "Updated Workspace Name"
              description: "Updated description for the workspace."
        responses:
        200:
          description: Workspace updated successfully.
          content:
            application/json:
              example:
                updated: 1
        400:
          description: Invalid update workspace payload - The request body contains invalid or missing data.
          content:
            application/json:
              example:
                error: "Invalid update workspace payload"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to update this workspace.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Workspace Not Found"
        500:
          description: Failed to update workspace - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to update workspace"
    delete:
      tags:
        - Workspaces
      summary: Delete a workspace by ID
      operationId: deleteWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Workspace deleted successfully.
          content:
            application/json:
              example:
                deleted: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to delete this workspace.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Workspace Not Found"
        500:
          description: Failed to delete a workspace - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to delete a workspace"
  /workspaces/{workspaceId}/members:
    get:
      tags:
        - Workspaces
      summary: Get members of a workspace
      operationId: getWorkspaceMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of members in the workspace.
          content:
            application/json:
              example:
                - id: "60f6a08b22b22b003cd9ed8f"
                  username: "member1"
                  email: "member1@example.com"
                  isOwner: true
                - id: "60f6a08b22b22b003cd9ed90"
                  username: "member2"
                  email: "member2@example.com"
                  isOwner: false
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Workspace Not Found"
        500:
          description: Failed to get workspace members - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to get workspace members"
  /workspaces/{workspaceId}/add_member:
    put:
      tags:
        - Workspaces
      summary: Add members to a workspace
      operationId: addMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The member's email address."
              required:
                - email
            example:
              email: "member@example.com"
      responses:
        200:
          description: Members added successfully.
          content:
            application/json:
              example:
                addedUser:
                  id: "60f6a08b22b22b003cd9ed8f"
                  username: "username"
                  email: "user@example.com"
        400:
          description: Members field is required - The request body is missing the members field.
          content:
            application/json:
              example:
                error: "invalid workspace add member payload"
                validations:
                  - "{...}"
                  - "{...}"
                  - "..."
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to add members to this workspace.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              examples:
                user_not_found:
                  summary: If you are trying to add a non-existing user
                  value:
                    error: "no user found with the same email"
                workspace_not_found:
                  summary: If not workspace found with the given ID
                  value:
                    error: "Workspace Not Found"
        500:
          description: Failed to add members - An error occurred on the server.
          content:
            application/json:
              example:
                error: "failed to add member to workspace"
  /workspaces/{workspaceId}/remove_members:
    put:
      tags:
        - Workspaces
      summary: Remove members from a workspace
      operationId: deleteMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: string
                  description: "Array of member IDs to remove from the workspace."
              required:
                - members
            example:
              members:
                - "64c1a1e1b2c4f72a9b6c2d5d"
                - "64c1a1e1b2c4f72a9b6c2d5e"
      responses:
        200:
          description: Members deleted successfully.
          content:
            application/json:
              example:
                deleted: 2
        400:
          description: If the payload is invalid or missing the valid members field.
          content:
            application/json:
              example:
                error: "Members field is required"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to remove members from this workspace.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Workspace Not Found"
        500:
          description: Failed to remove members - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to remove members"
  /workspaces/{workspaceId}/change_owner:
    put:
      tags:
        - Workspaces
      summary: Change owner of a workspace
      operationId: changeOwner
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newOwnerId:
                  type: string
                  description: "The ID of the new owner."
              required:
                - newOwnerId
            example:
              newOwnerId: "64c1a1e1b2c4f72a9b6c2d5c"
      responses:
        200:
          description: Workspace owner changed successfully.
          content:
            application/json:
              example:
                updated: 1
        400:
          description: newOwnerId is missing or invalid - The request body contains an invalid or missing newOwnerId field.
          content:
            application/json:
              example:
                error: "newOwnerId is missing or invalid"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to change the owner of this workspace.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Workspace Not Found"
        500:
          description: Failed to change workspace owner - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to change workspace owner"
  /workspaces/{workspaceId}/projects:
    get:
      tags:
        - Projects
      summary: Get all joined projects
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of joined projects
          content:
            application/json:
              example:
                - id: "64df4372bc8c6521f5f1b557"
                  name: "Project A"
                  description: "Description of Project A"
                  deadline: "2024-09-01"
                  owner:
                    id: "64df42e7bc8c6521f5f1b556"
                    username: "owner_user"
                    email: "owner@example.com"
                  all_states: []
                  all_labels: []
                  created_at: "2024-08-15T12:34:56Z"
                  isOwner: true
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        404:
          description: Project Not Found - The project with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Project Not Found"
    post:
      tags:
        - Projects
      summary: Create a new project
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                deadline:
                  type: string
                  format: date
            example:
              name: "New Project"
              description: "A description of the new project"
              deadline: "2024-09-01"
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              example:
                projectId: "64df4372bc8c6521f5f1b557"
        400:
          description: Invalid project payload - The request body contains invalid or missing data.
          content:
            application/json:
              example:
                error: "Invalid project payload"
        500:
          description: Failed to create a project - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to create a project"
  /workspaces/{workspaceId}/projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get a specific project
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project details retrieved successfully
          content:
            application/json:
              example:
                id: "64df4372bc8c6521f5f1b557"
                name: "Project A"
                description: "Description of Project A"
                deadline: "2024-09-01"
                owner:
                  id: "64df42e7bc8c6521f5f1b556"
                  username: "owner_user"
                  email: "owner@example.com"
                all_states: []
                all_labels: []
                created_at: "2024-08-15T12:34:56Z"
                isOwner: true
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not a project member.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Project Not Found - The project with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Project Not Found"
    put:
      tags:
        - Projects
      summary: Update a project
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                description:
                  type: string
                deadline:
                  type: string
                  format: date
            example:
              name: "Updated Project Name"
              description: "Updated description"
              deadline: "2024-10-01"
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              example:
                updated: 1
        400:
          description: Invalid update project payload - The request body contains invalid or missing data.
          content:
            application/json:
              example:
                error: "Invalid update project payload"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to update this project.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Project Not Found - The project with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Project Not Found"
        '500':
          description: Failed to update project
    delete:
      tags:
        - Projects
      summary: Delete a project
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              example:
                deleted: 1
        403:
          description: Forbidden - The user is not allowed to delete this project.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Project Not Found - The project with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Project Not Found"
        '500':
          description: Failed to delete project
  /workspaces/{workspaceId}/projects/{projectId}/members:
    get:
      tags:
        - Projects
      summary: Get project members
      operationId: getMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
      responses:
        200:
          description: A list of members in the workspace.
          content:
            application/json:
              example:
                - id: "60f6a08b22b22b003cd9ed8f"
                  username: "member1"
                  email: "member1@example.com"
                  isOwner: true
                - id: "60f6a08b22b22b003cd9ed90"
                  username: "member2"
                  email: "member2@example.com"
                  isOwner: false
        '400':
          description: Invalid project ID
          content:
            application/json:
              example:
                error: "Invalid update project payload"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        404:
          description: Project Not Found - The project with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Project Not Found"
  /workspaces/{workspaceId}/projects/{projectId}/add_members:
    put:
      tags:
        - Projects
      summary: Add members to a project
      operationId: addMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: string
                  description: "Array of member IDs to add in the project."
              required:
                - members
            example:
              members:
                - "64c1a1e1b2c4f72a9b6c2d5d"
                - "64c1a1e1b2c4f72a9b6c2d5e"
      responses:
        200:
          description: Members added successfully.
          content:
            application/json:
              example:
                state: "ok"
                added: 2
        400:
          description: Members field is required - The request body is missing the members field.
          content:
            application/json:
              example:
                error: "Members field is required"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to add members to this project.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Project Not Found - The project with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Project Not Found"
        500:
          description: Failed to add members - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to add members"
  /workspaces/{workspaceId}/projects/{projectId}/remove_members:
    put:
      tags:
        - Projects
      summary: Remove members from a project
      operationId: deleteMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: string
                  description: "Array of member IDs to remove from the project."
              required:
                - members
            example:
              members:
                - "64c1a1e1b2c4f72a9b6c2d5d"
                - "64c1a1e1b2c4f72a9b6c2d5e"
      responses:
        200:
          description: Members deleted successfully.
          content:
            application/json:
              example:
                state: "ok"
                deleted: 2
        400:
          description: Members field is required - The request body is missing the members field.
          content:
            application/json:
              example:
                error: "Members field is required"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to remove members from this project.
          content:
            application/json:
              example:
                error: "Forbidden"
        404:
          description: Project Not Found - The project with the given ID does not exist.
          content:
            application/json:
              example:
                error: "Project Not Found"
        500:
          description: Failed to remove members - An error occurred on the server.
          content:
            application/json:
              example:
                error: "Failed to remove members"
  /workspaces/{workspaceId}/projects/{projectId}/questions:
    get:
      tags:
        - Questions
      summary: Get all questions
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
      responses:
        200:
          description: All questions found.
          content:
            application/json:
              example:
                - id: "66cc6ce8e2132e3682e198a4"
                  question: "Why the sky's color is blue?"
                  created_at: "2024-08-26T11:54:16.349Z"
                  isAuthor: true
                  author:
                    id: "66c67621445d7e187ffd4853"
                    username: "Admin"
                    email: "admin@example.com"
                  replies:
                    - id: "66cc71fd49611bb8a4518ca3"
                      reply": "No body gonna know!!"
                      isAuthor: true
                      created_at: "2024-08-26T12:15:57.494Z"
                      author":
                        username: "Admin"
                        email: "admin@example.com"
                        id: "66c67621445d7e187ffd4853"
                - id: "66cc6ce8e2132e3682e198a5"
                  question: "Why the sky's color is blue?"
                  created_at: "2024-08-26T11:54:45.875Z"
                  isAuthor: false
                  author:
                    id: "66c67621445d7e187ffd4855"
                    username: "User"
                    email: "user@example.com"
                  replies: []
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to see any questions.
          content:
            application/json:
              example:
                error: "Forbidden"
    post:
      tags:
        - Questions
      summary: Create a new question and add it to a project.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: "The question to add."
              required:
                - question
            example:
              question: 'How it end up like that?'
      responses:
        201:
          description: The question was created and added to the project.
          content:
            application/json:
              example:
                questionId: '66c7798ad1f4df22f9bdd934'
        400:
          description: Invalid request body fields.
          content:
            application/json:
              example:
                error: "invalid question payload"
                validations:
                  - "{...}"
                  - "{...}"
                  - "..."
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to create/add questions to the project.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server errro.
          content:
            application/json:
              example:
                error: "Failed to create a question"
  /workspaces/{workspaceId}/projects/{projectId}/questions/{questionId}:
    put:
      tags:
        - Questions
      summary: Edit/Update question
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the question
      responses:
        200:
          description: Question updated.
          content:
            application/json:
              example:
                updated: 1
        400:
          description: Invalid edit question payload.
          content:
            application/json:
              example:
                error: 'invalid update question payload'
                validations:
                  - "{...}"
                  - "{...}"
                  - "..."
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to edit the question.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to update question"
    delete:
      tags:
        - Questions
      summary: Delete question
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the question
      responses:
        200:
          description: Question deleted.
          content:
            application/json:
              example:
                deleted: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to delete the question.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to delete question"
  /workspaces/{workspaceId}/projects/{projectId}/questions/{questionId}/replies:
    post:
      tags:
        - Questions
      summary: Create a reply to a question.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the question
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reply:
                  type: string
                  description: "The reply to the question."
              required:
                - reply
            example:
              reply: 'No body gonna know!!'
      responses:
        201:
          description: The reply was added to the question.
          content:
            application/json:
              example:
                replyId: '66c7798ad1f4df22f9bdd934'
        400:
          description: Invalid reply payload.
          content:
            application/json:
              example:
                error: "invalid reply payload"
                validations:
                  - "{...}"
                  - "{...}"
                  - "..."
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to reply to the question
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server error.
          content:
            application/json:
              example:
                error: "Failed to create a question reply"
  /workspaces/{workspaceId}/projects/{projectId}/questions/{questionId}/replies/{replyId}:
    put:
      tags:
        - Questions
      summary: Edit/Update reply. only the author can edit the reply.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the question
        - name: replyId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the question reply
      responses:
        200:
          description: Reply updated.
          content:
            application/json:
              example:
                updated: 1
        400:
          description: Invalid edit question reply payload.
          content:
            application/json:
              example:
                error: 'invalid update question reply payload'
                validations:
                  - "{...}"
                  - "{...}"
                  - "..."
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to edit the question reply.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to update question reply"
    delete:
      tags:
        - Questions
      summary: Delete question reply. Author and the project owner could delete the reply.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the question
        - name: replyId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the question reply
      responses:
        200:
          description: Question reply deleted.
          content:
            application/json:
              example:
                deleted: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to delete the question reply.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to delete question reply"
  /workspaces/{workspaceId}/projects/{projectId}/notes:
    get:
      tags:
        - Notes
      summary: Get all notes under a project
      description: >
        User could see owned and public notes under a project.

      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
      responses:
        200:
          description: All notes.
          content:
            application/json:
              example:
                - note: "Finish the project before the third deadline XD"
                  id: "66cc849695de2429ef2f97f2"
                  isAuthor: true
                  isPublic: false
                  created_at: "2024-08-26T13:35:18.293Z"
                  author:
                    id: "66c67621445d7e187ffd4853"
                    username: "Admin"
                    email: "admin@example.com"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to see any notes.
          content:
            application/json:
              example:
                error: "Forbidden"
    post:
      tags:
        - Notes
      summary: Create a new note
      description: Creates a new provate note owned by the user.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
                  description: "The note to add."
              required:
                - note
            example:
              note: 'Finish the project before the third deadline XD'
      responses:
        201:
          description: The note was created and added to the project.
          content:
            application/json:
              example:
                noteId: '66c7798ad1f4df22f9bdd934'
        400:
          description: Invalid note payload.
          content:
            application/json:
              example:
                error: "invalid note payload"
                validations:
                  - "{...}"
                  - "{...}"
                  - "..."
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to create notes.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server errro.
          content:
            application/json:
              example:
                error: "Failed to create a note"
  /workspaces/{workspaceId}/projects/{projectId}/notes/{noteId}:
    put:
      tags:
        - Notes
      summary: Edit note
      description: Only the note's author can edit the note.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: noteId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the note
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  type: string
                  description: "The new note."
              required:
                - note
            example:
              note: 'Forget about that project, :)'
      responses:
        200:
          description: note updated.
          content:
            application/json:
              example:
                updated: 1
        400:
          description: Invalid edit note payload.
          content:
            application/json:
              example:
                error: 'invalid update question payload'
                validations:
                  - "{...}"
                  - "{...}"
                  - "..."
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to edit the note.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to update question"
    delete:
      tags:
        - Notes
      summary: Delete note
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: noteId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the note
      responses:
        200:
          description: Note deleted.
          content:
            application/json:
              example:
                deleted: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to delete the note.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to delete question"
  /workspaces/{workspaceId}/projects/{projectId}/notes/{noteId}/set_public:
    put:
      tags:
        - Notes
      summary: Set a note as public
      description: Only the note's author can set the note as public.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: noteId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the note
      responses:
        200:
          description: note updated.
          content:
            application/json:
              example:
                updated: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to edit the note.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to update question"
  /workspaces/{workspaceId}/projects/{projectId}/notes/{noteId}/unset_public:
    put:
      tags:
        - Notes
      summary: Unset a note as public
      description: Only the note's author can do this action.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the project
        - name: noteId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the note
      responses:
        200:
          description: note updated.
          content:
            application/json:
              example:
                updated: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to edit the note.
          content:
            application/json:
              example:
                error: "Forbidden"
        500:
          description: General server side error.
          content:
            application/json:
              example:
                error: "failed to update question"
  /workspaces/{workspaceId}/projects/{projectId}/tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks in a project
      description: Retrieve a list of all tasks within a specified project.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: The ID of the project.
          schema:
            type: string
      responses:
        '200':
          description: A list of tasks in the project.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      example: "Task title"
                    body:
                      type: string
                      example: "Task description"
                    deadline:
                      type: string
                      format: date
                      example: "2024-08-30"
                    state:
                      type: string
                      example: "In Progress"
                    labels:
                      type: array
                      items:
                        type: string
                      example: ["urgent", "backend"]
                    createdAt:
                      type: string
                      format: date-time
                      example: "2024-08-27T14:21:00Z"
                    isArchived:
                      type: boolean
                      example: false
                    checklists:
                      type: array
                      items:
                        type: string
                      example: ["64f9c6db5c1f3b2a5e5d7d8e"]
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"

    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Add a new task to the specified project.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: The ID of the project.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Task"
                body:
                  type: string
                  example: "Description of the task."
                deadline:
                  type: string
                  format: date
                  example: "2024-08-30"
                state:
                  type: string
                  example: "Pending"
                labels:
                  type: array
                  items:
                    type: string
                  example: ["frontend", "high-priority"]
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskId:
                    type: string
                    example: "64f9c6db5c1f3b2a5e5d7d8e"

        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"

  /workspaces/{workspaceId}/projects/{projectId}/tasks/{taskId}:
    put:
      tags:
        - Tasks
      summary: Update a task
      description: Update details of a specific task within the project.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: The ID of the project.
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          description: The ID of the task.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Task Title"
                body:
                  type: string
                  example: "Updated description of the task."
                deadline:
                  type: string
                  format: date
                  example: "2024-09-01"
                state:
                  type: string
                  example: "Completed"
                labels:
                  type: array
                  items:
                    type: string
                  example: ["backend", "urgent"]
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: integer
                    example: 1

        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"

    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: Remove a task from the specified project.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: The ID of the project.
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          description: The ID of the task.
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    example: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"

  /workspaces/{workspaceId}/projects/{projectId}/tasks/{taskId}/archive:
    post:
      tags:
        - Tasks
      summary: Archive a task
      description: Mark a task as archived.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: The ID of the project.
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          description: The ID of the task.
          schema:
            type: string
      responses:
        '200':
          description: Task archived successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: integer
                    example: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"

  /workspaces/{workspaceId}/projects/{projectId}/tasks/{taskId}/unarchive:
    post:
      tags:
        - Tasks
      summary: Unarchive a task
      description: Mark a task as unarchived.
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
        - name: projectId
          in: path
          required: true
          description: The ID of the project.
          schema:
            type: string
        - name: taskId
          in: path
          required: true
          description: The ID of the task.
          schema:
            type: string
      responses:
        '200':
          description: Task unarchived successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: integer
                    example: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                error: "Unauthorized"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
