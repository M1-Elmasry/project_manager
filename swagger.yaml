openapi: 3.0.0
info:
  title: Project Manager API
  version: 1.0.0
  description: API for managing projects, including authentication.
servers:
  - url: http://localhost:5000
    description: Local development server
tags:
  - name: Authentication
    description: Endpoints related to user authentication
  - name: Workspaces
    description: Endpooints related for workspaces operations

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newuser"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "64dfaf7b6f7a6b1f6b7f7a6b"
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid create user payload"
                  validations:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: "email"
                        message:
                          type: string
                          example: "Invalid email format"
        '500':
          description: Failed to create user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "failed to create user"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login and generate a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
              required:
                - email
                - password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Invalid login payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid login payload"
                  validations:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: "password"
                        message:
                          type: string
                          example: "Password must be at least 8 characters"
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid email or password"

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get the current authenticated user's information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "64dfaf7b6f7a6b1f6b7f7a6b"
                  username:
                    type: string
                    example: "newuser"
                  email:
                    type: string
                    format: email
                    example: "user@example.com"
        '401':
          description: Invalid authorization or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid authorization"
  /workspaces:
    get:
      tags:
        - Workspaces
      summary: Get all workspaces where the user is a member
      operationId: getAllJoinedWorkspaces
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of workspaces the user has joined.
          content:
            application/json:
              example:
                - id: "60f6a08b22b22b003cd9ed8e"
                  name: "Workspace 1"
                  description: "A description of workspace 1"
                  owner:
                    id: "60f6a08b22b22b003cd9ed8f"
                    username: "owner_username"
                    email: "owner@example.com"
                  isOwner: true
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        500:
          description: Internal Server Error - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Internal Server Error"
    post:
      tags:
        - Workspaces
      summary: Create a new workspace
      operationId: createWorkspace
      security:
        - bearerAuth: []
      requestBody:
        description: Workspace creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspacePayload'
      responses:
        201:
          description: Workspace created successfully.
          content:
            application/json:
              example:
                workspaceId: "60f6a08b22b22b003cd9ed8e"
        400:
          description: Invalid workspace payload - The request body contains invalid or missing data.
          content:
            application/json:
              example:
                message: "Invalid workspace payload"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        500:
          description: Failed to create a workspace - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Failed to create a workspace"

  /workspaces/{workspaceId}:
    get:
      tags:
        - Workspaces
      summary: Get a workspace by ID
      operationId: getWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Details of the requested workspace.
          content:
            application/json:
              example:
                id: "60f6a08b22b22b003cd9ed8e"
                name: "Workspace 1"
                description: "A description of workspace 1"
                isOwner: true
                owner:
                  id: "60f6a08b22b22b003cd9ed8f"
                  username: "owner_username"
                  email: "owner@example.com"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to access this workspace.
          content:
            application/json:
              example:
                message: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                message: "Workspace Not Found"
        500:
          description: Internal Server Error - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Internal Server Error"

    put:
      tags:
        - Workspaces
      summary: Update a workspace by ID
      operationId: updateWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Workspace update payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceUpdatePayload'
        responses:
        200:
          description: Workspace updated successfully.
          content:
            application/json:
              example:
                updated: 1
        400:
          description: Invalid update workspace payload - The request body contains invalid or missing data.
          content:
            application/json:
              example:
                message: "Invalid update workspace payload"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to update this workspace.
          content:
            application/json:
              example:
                message: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                message: "Workspace Not Found"
        500:
          description: Failed to update workspace - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Failed to update workspace"

    delete:
      tags:
        - Workspaces
      summary: Delete a workspace by ID
      operationId: deleteWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Workspace deleted successfully.
          content:
            application/json:
              example:
                deleted: 1
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to delete this workspace.
          content:
            application/json:
              example:
                message: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                message: "Workspace Not Found"
        500:
          description: Failed to delete a workspace - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Failed to delete a workspace"

  /workspaces/{workspaceId}/members:
    get:
      tags:
        - Workspaces
      summary: Get members of a workspace
      operationId: getWorkspaceMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of members in the workspace.
          content:
            application/json:
              example:
                - id: "60f6a08b22b22b003cd9ed8f"
                  username: "member1"
                  email: "member1@example.com"
                - id: "60f6a08b22b22b003cd9ed90"
                  username: "member2"
                  email: "member2@example.com"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                message: "Workspace Not Found"
        500:
          description: Failed to get workspace members - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Failed to get workspace members"

    post:
      tags:
        - Workspaces
      summary: Add members to a workspace
      operationId: addMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Members to add to the workspace
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Members added successfully.
          content:
            application/json:
              example:
                state: "ok"
                added: 2
        400:
          description: Members field is required - The request body is missing the members field.
          content:
            application/json:
              example:
                message: "Members field is required"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to add members to this workspace.
          content:
            application/json:
              example:
                message: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                message: "Workspace Not Found"
        500:
          description: Failed to add members - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Failed to add members"

    delete:
      tags:
        - Workspaces
      summary: Remove members from a workspace
      operationId: deleteMembers
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Members to remove from the workspace
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Members deleted successfully.
          content:
            application/json:
              example:
                state: "ok"
                deleted: 1
        400:
          description: Members field is required - The request body is missing the members field.
          content:
            application/json:
              example:
                message: "Members field is required"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to remove members from this workspace.
          content:
            application/json:
              example:
                message: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                message: "Workspace Not Found"
        500:
          description: Failed to remove members - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Failed to remove members"

  /workspaces/{workspaceId}/change_owner:
    post:
      tags:
        - Workspaces
      summary: Change owner of a workspace
      operationId: changeOwner
      security:
        - bearerAuth: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: New owner ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newOwnerId:
                  type: string
                  description: ID of the new owner
      responses:
        200:
          description: Workspace owner changed successfully.
          content:
            application/json:
              example:
                updated: 1
        400:
          description: newOwnerId is missing or invalid - The request body contains an invalid or missing newOwnerId field.
          content:
            application/json:
              example:
                message: "newOwnerId is missing or invalid"
        401:
          description: Unauthorized - The user is not authenticated.
          content:
            application/json:
              example:
                message: "Unauthorized"
        403:
          description: Forbidden - The user is not allowed to change the owner of this workspace.
          content:
            application/json:
              example:
                message: "Forbidden"
        404:
          description: Workspace Not Found - The workspace with the given ID does not exist.
          content:
            application/json:
              example:
                message: "Workspace Not Found"
        500:
          description: Failed to change workspace owner - An error occurred on the server.
          content:
            application/json:
              example:
                message: "Failed to change workspace owner"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
